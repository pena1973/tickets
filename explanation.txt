Добрый день, 
для чего Вы даете префикс query для редьюсеров? 
Можно его не использовать. 
Для начала так как Вы используете typescript рекомендую сделать типизацию хуков, 
типизация всего стейта
export type RootState = ReturnType<typeof store.getState>
типизация диспатч
export type AppDispatch = typeof store.dispatch 

Далее Вы создаете файл hooks
type DispatchFunc = () => AppDispatch
export const useAppDispatch: DispatchFunc = useDispatch
export const useAppSelector: TypedUseSelectorHook<RootState> = useSelector
тут у Вас получаются уже типизированные селекторы и при обращению 
к стору не нужно их типизировать дополнительно.

По поводу ошибки, при скрине я не вижу на что именно  ругается ts, 
так как ВЫ прислали просто подчеркнутое свойство.
Обращение к стору можно сделать следующим образом(на примере редьюсера с задачами)
const initialState = {
  tasks: []
}; стейт
const tasks = useAppSelector(state => state.tasks); 
обращаю внимание, что используем уже кастомный хук. 
В переменной tasks у Вас будут присвоены все задачи с редаксе. 
Также в дальнейшем рекомендую использовать функции селекторы при обращении к стору, 
так как данный подход обладает преимуществами, например
создаете отдельный файл selectors
export const selectTasks = (state: RootState): тут тпизация того, 
что возвращает селектор => state.tasks.; // Функция-селектор для получения списка задач, 
использование в компоненте
 const tasks = useSelector(selectTasks);
Селекторы обладают такими преимуществами, 
как повторное использование(Функции-селекторы могут быть повторно 
использованы в разных компонентах, что улучшает масштабируемость), 
также если у Вас поменяется название переменной в редаксе с tasks на newTasks, 
то Вам данной свойство нужно будет поменять только в селекторе, 
а не во всем коде, где Вы используете tasks. 
Используя функции-селекторы, вы можете точно указать, 
какие части состояния вам нужны. 
Это помогает избежать ненужных ререндеров компонентов при обновлении других частей состояния. 
Путем определения типов состояния и использования типов в функциях-селекторах, 
вы получаете более надежную типизацию данных, 
что помогает предотвратить ошибки на этапе компиляции.